name: CD - Deploy to PRODUCTION

on:
  push:
    branches: [main, production]
  workflow_dispatch:

env:
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
  ENVIRONMENT: production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub (Optional)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: false
          tags: |
            nx-api-prod:latest
            nx-api-prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: false
          tags: |
            nx-web-prod:latest
            nx-web-prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to VPS (PRODUCTION)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            
            # Check if directory exists
            if [ ! -d "/opt/nx-mono-repo" ]; then
              echo "Error: /opt/nx-mono-repo does not exist!"
              echo "Please run the VPS setup script first."
              exit 1
            fi
            
            # Navigate to deployment directory
            cd /opt/nx-mono-repo
            
            # Pull latest changes
            echo "Pulling latest changes..."
            git fetch origin
            git checkout production || git checkout main
            git pull
            
            # Create environment-specific .env file
            echo "Creating PRODUCTION environment file..."
            cat > apps/api/.env.prod << 'EOF'
            NODE_ENV=production
            PORT=3009
            DB_HOST=${{ secrets.PROD_DB_HOST || 'localhost' }}
            DB_PORT=${{ secrets.PROD_DB_PORT || '5432' }}
            DB_NAME=${{ secrets.PROD_DB_NAME }}
            DB_USER=${{ secrets.PROD_DB_USER }}
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            EOF
            
            # Create network if it doesn't exist
            if ! docker network ls | grep -q npm_network; then
              echo "Creating npm_network..."
              docker network create npm_network
            fi
            
            # Stop and remove PRODUCTION containers
            echo "Stopping PRODUCTION containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            # Build images
            echo "Building PRODUCTION images..."
            docker-compose -f docker-compose.prod.yml build --no-cache
            
            # Start containers
            echo "Starting PRODUCTION containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for containers to start
            sleep 10
            
            # Check container status
            echo "Checking container status..."
            docker-compose -f docker-compose.prod.yml ps
            
            # Clean up
            echo "Cleaning up unused Docker resources..."
            docker system prune -f
      
      - name: Health Check
        run: |
          sleep 30
          echo "Checking PRODUCTION health endpoint..."
          curl -f http://${{ secrets.VPS_HOST }}:3009/health || exit 1
        continue-on-error: true
      
      - name: Notify deployment status
        if: always()
        run: |
          echo "🚀 PRODUCTION Deployment completed with status: ${{ job.status }}"
          echo "📍 URL: http://${{ secrets.VPS_HOST }}:3009"

