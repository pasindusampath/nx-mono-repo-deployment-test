name: CD - Deploy to STAGING

on:
  push:
    branches: [staging]
  workflow_dispatch:

env:
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
  ENVIRONMENT: staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub (Optional)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: false
          tags: |
            nx-api-staging:latest
            nx-api-staging:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: false
          tags: |
            nx-web-staging:latest
            nx-web-staging:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy to VPS (STAGING)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            
            # Check if directory exists, create if needed
            if [ ! -d "/opt/nx-mono-repo-staging" ]; then
              echo "Creating /opt/nx-mono-repo-staging directory..."
              sudo mkdir -p /opt/nx-mono-repo-staging
              sudo chown -R $USER:$USER /opt/nx-mono-repo-staging
              cd /opt/nx-mono-repo-staging
              git clone ${{ github.server_url }}/${{ github.repository }} .
              git checkout staging
            else
              # Navigate to deployment directory
              cd /opt/nx-mono-repo-staging
              
              # Pull latest changes
              echo "Pulling latest changes..."
              git fetch origin
              git checkout staging
              git pull origin staging
            fi
            
            # Create environment-specific .env files
            echo "Creating STAGING environment files..."
            
            # API env file
            cat > apps/api/.env.staging << 'EOF'
            NODE_ENV=staging
            PORT=3012
            DB_HOST=127.0.0.1
            DB_PORT=${{ secrets.STAGING_DB_PORT }}
            DB_NAME=${{ secrets.STAGING_DB_NAME }}
            DB_USER=${{ secrets.STAGING_DB_USER }}
            DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
            CORS_ORIGIN=https://staging-web.pasindusampath.com
            EOF
            
            # Web env file
            cat > apps/web/.env.staging << 'EOF'
            NODE_ENV=staging
            PORT=3022
            NEXT_PUBLIC_API_URL=https://staging-api.pasindusampath.com
            EOF
            
            # Create network if it doesn't exist
            if ! docker network ls | grep -q npm_network; then
              echo "Creating npm_network..."
              docker network create npm_network
            fi
            
            # Stop and remove STAGING containers (including orphans)
            echo "Stopping STAGING containers..."
            docker-compose -f docker-compose.staging.yml down --remove-orphans || true
            
            # Force remove any containers with conflicting names
            docker rm -f nx-api-staging nx-web-staging 2>/dev/null || true
            
            # Build images
            echo "Building STAGING images..."
            docker-compose -f docker-compose.staging.yml build --no-cache
            
            # Start containers
            echo "Starting STAGING containers..."
            docker-compose -f docker-compose.staging.yml up -d
            
            # Wait for containers to start
            sleep 10
            
            # Check container status
            echo "Checking container status..."
            docker-compose -f docker-compose.staging.yml ps
            
            # Clean up
            echo "Cleaning up unused Docker resources..."
            docker system prune -f
      
      - name: Health Check
        run: |
          sleep 30
          echo "Checking STAGING health endpoint..."
          curl -f https://staging-api.pasindusampath.com/health || curl -f http://${{ secrets.VPS_HOST }}:3012/health || exit 1
        continue-on-error: true
      
      - name: Notify deployment status
        if: always()
        run: |
          echo "üöÄ STAGING Deployment completed with status: ${{ job.status }}"
          echo "üìç API URL: https://staging-api.pasindusampath.com"
          echo "üìç Web URL: https://staging-web.pasindusampath.com"

